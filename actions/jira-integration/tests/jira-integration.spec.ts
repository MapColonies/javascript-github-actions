// Generated by Copilot

import { faker } from '@faker-js/faker';
import { fromPartial } from '@total-typescript/shoehorn';
import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
import type { MockedFunction } from 'vitest';

import * as core from '@actions/core';
import * as github from '@actions/github';
import { run } from '../main.js';

// Mock the action modules
vi.mock('@actions/core');
vi.mock('@actions/github');

/**
 * Interface for test data to reduce variable repetition
 */
interface TestData {
  readonly token: string;
  readonly prNumber: number;
  readonly jiraBaseUrl: string;
  readonly jiraPattern: string;
  readonly jiraIssue: string;
  readonly prTitleWithJira: string;
  readonly prTitleWithoutJira: string;
  readonly prSha: string;
  readonly owner: string;
  readonly repo: string;
  readonly bypassUser: string;
  readonly nonBypassUser: string;
}

/**
 * Interface for mock GitHub input parameters
 */
interface MockInputOptions {
  readonly githubToken?: string;
  readonly jiraBaseUrl?: string;
  readonly jiraIssuePattern?: string;
  readonly bypassLabels?: string;
  readonly bypassUsers?: string;
}

/**
 * Test suite for the jira-integration GitHub action
 */
describe('jira-integration Action', () => {
  let mockGetInput: MockedFunction<typeof core.getInput>;
  let mockSetFailed: MockedFunction<typeof core.setFailed>;
  let mockWarning: MockedFunction<typeof core.warning>;
  let mockGetOctokit: MockedFunction<typeof github.getOctokit>;
  let mockCreateComment: ReturnType<typeof vi.fn>;
  let mockUpdateComment: ReturnType<typeof vi.fn>;
  let mockListComments: ReturnType<typeof vi.fn>;
  let mockCreateCommitStatus: ReturnType<typeof vi.fn>;
  let mockListLabelsOnIssue: ReturnType<typeof vi.fn>;

  let testData: TestData;

  /**
   * Creates a mock input function with default and override options
   */
  const createMockGetInput = (options: MockInputOptions = {}) => {
    return (name: string): string => {
      switch (name) {
        case 'github-token':
          return options.githubToken ?? testData.token;
        case 'jira-base-url':
          return options.jiraBaseUrl ?? testData.jiraBaseUrl;
        case 'jira-issue-pattern':
          return options.jiraIssuePattern ?? testData.jiraPattern;
        case 'bypass-labels':
          return options.bypassLabels ?? '';
        case 'bypass-users':
          return options.bypassUsers ?? '';
        default:
          return '';
      }
    };
  };

  /**
   * Sets up GitHub context with optional overrides
   */
  const setupGitHubContext = (overrides: Partial<TestData> = {}) => {
    const data = { ...testData, ...overrides };
    Object.defineProperty(github, 'context', {
      value: {
        eventName: 'pull_request',
        repo: { owner: data.owner, repo: data.repo },
        issue: { number: data.prNumber },
        payload: {
          pull_request: {
            title: data.prTitleWithJira,
            head: { sha: data.prSha },
            user: { login: data.nonBypassUser }, // Default to non-bypass user
          },
        },
      },
      configurable: true,
    });
  };

  beforeEach(() => {
    // Reset all mocks
    vi.clearAllMocks();

    // Generate test data
    testData = {
      token: faker.string.alphanumeric(40),
      prNumber: faker.number.int({ min: 1, max: 999 }),
      jiraBaseUrl: 'https://mapcolonies.atlassian.net',
      jiraPattern: 'MAPCO-\\d+',
      jiraIssue: `MAPCO-${faker.number.int({ min: 1000, max: 9999 })}`,
      prTitleWithJira: `feat: MAPCO-${faker.number.int({ min: 1000, max: 9999 })} - ${faker.lorem.words(3)}`,
      prTitleWithoutJira: `feat: ${faker.lorem.words(3)}`,
      prSha: faker.git.commitSha(),
      owner: faker.person.firstName().toLowerCase(),
      repo: faker.lorem.word(),
      bypassUser: faker.internet.username(),
      nonBypassUser: faker.internet.username(),
    };

    // Mock core functions
    mockGetInput = vi.mocked(core.getInput);
    mockSetFailed = vi.mocked(core.setFailed);
    mockWarning = vi.mocked(core.warning);

    // Mock GitHub API functions
    mockCreateComment = vi.fn();
    mockUpdateComment = vi.fn();
    mockListComments = vi.fn();
    mockCreateCommitStatus = vi.fn();
    mockListLabelsOnIssue = vi.fn();

    mockGetOctokit = vi.mocked(github.getOctokit);
    mockGetOctokit.mockReturnValue(
      fromPartial({
        rest: {
          issues: {
            createComment: mockCreateComment as unknown as ReturnType<typeof github.getOctokit>['rest']['issues']['createComment'],
            updateComment: mockUpdateComment as unknown as ReturnType<typeof github.getOctokit>['rest']['issues']['updateComment'],
            listComments: mockListComments as unknown as ReturnType<typeof github.getOctokit>['rest']['issues']['listComments'],
            listLabelsOnIssue: mockListLabelsOnIssue as unknown as ReturnType<typeof github.getOctokit>['rest']['issues']['listLabelsOnIssue'],
          },
          repos: {
            createCommitStatus: mockCreateCommitStatus as unknown as ReturnType<typeof github.getOctokit>['rest']['repos']['createCommitStatus'],
          },
        },
      })
    );

    // Setup default GitHub context
    setupGitHubContext();
  });

  afterEach(() => {
    vi.restoreAllMocks();
  });

  /**
   * Test successful Jira integration with valid issue in PR title
   */
  it('should create commit status and comment when Jira issue is found', async () => {
    mockGetInput.mockImplementation(createMockGetInput());
    mockListComments.mockResolvedValue({ data: [] });

    await run();

    // Extract the JIRA issue from the PR title to match what the actual function extracts
    const jiraIssueMatch = testData.prTitleWithJira.match(/MAPCO-\d+/);
    const extractedJiraIssue = jiraIssueMatch ? jiraIssueMatch[0] : testData.jiraIssue;

    // Verify commit status was created with success state
    expect(mockCreateCommitStatus).toHaveBeenCalledWith({
      owner: testData.owner,
      repo: testData.repo,
      sha: testData.prSha,
      state: 'success',
      target_url: `${testData.jiraBaseUrl}/browse/${extractedJiraIssue}`,
      description: 'Jira issue found in PR title',
      context: 'jira/issue-validation',
    });

    // Verify Jira comment was created
    expect(mockCreateComment).toHaveBeenCalledWith({
      owner: testData.owner,
      repo: testData.repo,
      issue_number: testData.prNumber,
      body: `ðŸŽ« **Related Jira Issue**: [${extractedJiraIssue}](${testData.jiraBaseUrl}/browse/${extractedJiraIssue})`,
    });

    expect(mockSetFailed).not.toHaveBeenCalled();
  });

  /**
   * Test handling of PR without Jira issue in title
   */
  it('should create error commit status when no Jira issue is found', async () => {
    setupGitHubContext({ prTitleWithJira: testData.prTitleWithoutJira });
    mockGetInput.mockImplementation(createMockGetInput());

    await run();

    // Verify commit status was created with error state
    expect(mockCreateCommitStatus).toHaveBeenCalledWith({
      owner: testData.owner,
      repo: testData.repo,
      sha: testData.prSha,
      state: 'error',
      target_url: undefined,
      description: 'Jira issue required in PR title (format: MAPCO-1234)',
      context: 'jira/issue-validation',
    });

    // Verify no Jira comment was created
    expect(mockCreateComment).not.toHaveBeenCalled();
    expect(mockWarning).toHaveBeenCalledWith('No Jira issue found in PR title');
  });

  /**
   * Test updating existing Jira comment
   */
  it('should update existing Jira comment when one already exists', async () => {
    const existingCommentId = faker.number.int({ min: 100, max: 999 });
    const oldJiraIssue = `OLD-${faker.number.int({ min: 100, max: 999 })}`;
    const oldJiraUrl = `https://${faker.company.name().toLowerCase().replace(/\s+/g, '-')}.atlassian.net`;

    mockListComments.mockResolvedValue({
      data: [
        {
          id: existingCommentId,
          user: { login: 'github-actions[bot]' },
          body: `ðŸŽ« Related Jira Issue: [${oldJiraIssue}](${oldJiraUrl}/browse/${oldJiraIssue})`,
        },
      ],
    });

    mockGetInput.mockImplementation(createMockGetInput());

    await run();

    // Extract the JIRA issue from the PR title for the expected comment
    const jiraIssueMatch = testData.prTitleWithJira.match(/MAPCO-\d+/);
    const extractedJiraIssue = jiraIssueMatch ? jiraIssueMatch[0] : testData.jiraIssue;

    // Verify existing comment was updated instead of creating new one
    expect(mockUpdateComment).toHaveBeenCalledWith({
      owner: testData.owner,
      repo: testData.repo,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      comment_id: existingCommentId,
      body: `ðŸŽ« **Related Jira Issue**: [${extractedJiraIssue}](${testData.jiraBaseUrl}/browse/${extractedJiraIssue})`,
    });

    expect(mockCreateComment).not.toHaveBeenCalled();
  });

  describe('Input Validation', () => {
    /**
     * Test action fails when GitHub token is missing
     */
    it('should fail when GitHub token is missing', async () => {
      mockGetInput.mockImplementation(createMockGetInput({ githubToken: '' }));

      await run();

      expect(mockSetFailed).toHaveBeenCalledWith('GitHub token is required');
      expect(mockCreateCommitStatus).not.toHaveBeenCalled();
      expect(mockCreateComment).not.toHaveBeenCalled();
    });

    /**
     * Test action fails when Jira base URL is missing
     */
    it('should fail when Jira base URL is missing', async () => {
      mockGetInput.mockImplementation(createMockGetInput({ jiraBaseUrl: '' }));

      await run();

      expect(mockSetFailed).toHaveBeenCalledWith('Jira base URL is required');
      expect(mockCreateCommitStatus).not.toHaveBeenCalled();
      expect(mockCreateComment).not.toHaveBeenCalled();
    });
  });

  describe('GitHub Context Validation', () => {
    /**
     * Test warning when not running on pull request event
     */
    it('should warn when not running on pull request event', async () => {
      Object.defineProperty(github, 'context', {
        value: {
          eventName: 'push',
          repo: {
            owner: testData.owner,
            repo: testData.repo,
          },
        },
        writable: true,
      });

      mockGetInput.mockImplementation(createMockGetInput());

      await run();

      expect(mockWarning).toHaveBeenCalledWith('This action is designed to work with pull request events');
      expect(mockCreateCommitStatus).not.toHaveBeenCalled();
      expect(mockCreateComment).not.toHaveBeenCalled();
    });

    /**
     * Test error handling when pull request payload is missing
     */
    it('should fail when pull request payload is missing', async () => {
      Object.defineProperty(github, 'context', {
        value: {
          eventName: 'pull_request',
          repo: {
            owner: testData.owner,
            repo: testData.repo,
          },
          payload: {},
        },
        writable: true,
      });

      mockGetInput.mockImplementation(createMockGetInput());

      await run();

      expect(mockSetFailed).toHaveBeenCalledWith('Pull request payload not found in context');
      expect(mockCreateCommitStatus).not.toHaveBeenCalled();
    });
  });

  describe('Error Handling', () => {
    /**
     * Test error handling when GitHub API calls fail
     */
    it('should handle API errors gracefully', async () => {
      const apiError = new Error(faker.lorem.sentence());

      mockGetInput.mockImplementation(createMockGetInput());
      mockCreateCommitStatus.mockRejectedValue(apiError);

      await run();

      expect(mockSetFailed).toHaveBeenCalledWith(`Action failed: ${apiError.message}`);
    });

    /**
     * Test handling of unknown error types
     */
    it('should handle unknown errors', async () => {
      const unknownError = faker.lorem.words(3);

      mockGetInput.mockImplementation(createMockGetInput());
      mockCreateCommitStatus.mockRejectedValue(unknownError);

      await run();

      expect(mockSetFailed).toHaveBeenCalledWith('Action failed: Unknown error occurred');
    });
  });

  describe('Core Jira Validation', () => {
    /**
     * Test custom Jira issue pattern matching
     */
    it('should work with custom Jira issue pattern', async () => {
      const customProject = faker.string.alpha({ length: { min: 3, max: 5 } }).toUpperCase();
      const customPattern = `${customProject}-\\d+`;
      const customIssue = `${customProject}-${faker.number.int({ min: 1000, max: 9999 })}`;
      const customTitle = `feat: ${customIssue} - ${faker.lorem.words(3)}`;

      setupGitHubContext({ prTitleWithJira: customTitle });
      mockGetInput.mockImplementation(createMockGetInput({ jiraIssuePattern: customPattern }));
      mockListComments.mockResolvedValue({ data: [] });

      await run();

      expect(mockCreateCommitStatus).toHaveBeenCalledWith({
        owner: testData.owner,
        repo: testData.repo,
        sha: testData.prSha,
        state: 'success',
        target_url: `${testData.jiraBaseUrl}/browse/${customIssue}`,
        description: 'Jira issue found in PR title',
        context: 'jira/issue-validation',
      });
    });

    /**
     * Test action with default jira pattern when no pattern provided
     */
    it('should use default MAPCO pattern when no jira-issue-pattern is provided', async () => {
      mockGetInput.mockImplementation(createMockGetInput({ jiraIssuePattern: '' }));
      mockListComments.mockResolvedValue({ data: [] });

      await run();

      // Extract the JIRA issue from the PR title for verification
      const jiraIssueMatch = testData.prTitleWithJira.match(/MAPCO-\d+/);
      const extractedJiraIssue = jiraIssueMatch ? jiraIssueMatch[0] : testData.jiraIssue;

      // Should still work with default MAPCO pattern
      expect(mockCreateCommitStatus).toHaveBeenCalledWith({
        owner: testData.owner,
        repo: testData.repo,
        sha: testData.prSha,
        state: 'success',
        target_url: `${testData.jiraBaseUrl}/browse/${extractedJiraIssue}`,
        description: 'Jira issue found in PR title',
        context: 'jira/issue-validation',
      });
    });

    /**
     * Test that Jira validation proceeds when PR author is not in bypass list
     */
    it('should perform Jira validation when PR author is not in bypass list', async () => {
      setupGitHubContext({ prTitleWithJira: testData.prTitleWithoutJira });
      mockGetInput.mockImplementation(createMockGetInput({ bypassUsers: testData.bypassUser }));

      // Set PR author to NOT be in bypass list by updating the context
      github.context.payload.pull_request!.user = { login: testData.nonBypassUser };

      await run();

      // Should create error status because no Jira issue in title
      expect(mockCreateCommitStatus).toHaveBeenCalledWith({
        owner: testData.owner,
        repo: testData.repo,
        sha: testData.prSha,
        state: 'error',
        target_url: undefined,
        description: 'Jira issue required in PR title (format: MAPCO-1234)',
        context: 'jira/issue-validation',
      });
    });

    /**
     * Test empty bypass users input
     */
    it('should perform normal validation when bypass-users is empty', async () => {
      setupGitHubContext({ prTitleWithJira: testData.prTitleWithoutJira });
      mockGetInput.mockImplementation(createMockGetInput({ bypassUsers: '' }));

      // Set PR author but bypass list is empty
      github.context.payload.pull_request!.user = { login: testData.bypassUser };

      await run();

      // Should not skip validation even though user could be a bypass user
      expect(mockCreateCommitStatus).toHaveBeenCalledWith({
        owner: testData.owner,
        repo: testData.repo,
        sha: testData.prSha,
        state: 'error',
        target_url: undefined,
        description: 'Jira issue required in PR title (format: MAPCO-1234)',
        context: 'jira/issue-validation',
      });
    });

    describe('Bypass Users', () => {
      /**
       * Test bypass users functionality - should skip validation when single bypass user is present
       */
      it('should skip Jira validation when PR author is the single bypass user', async () => {
        setupGitHubContext({ prTitleWithJira: testData.prTitleWithoutJira });
        mockGetInput.mockImplementation(createMockGetInput({ bypassUsers: testData.bypassUser }));

        // Set PR author to be the bypass user
        github.context.payload.pull_request!.user = { login: testData.bypassUser };

        await run();

        // Should create success status despite no Jira issue in title
        expect(mockCreateCommitStatus).toHaveBeenCalledWith({
          owner: testData.owner,
          repo: testData.repo,
          sha: testData.prSha,
          state: 'success',
          target_url: undefined,
          description: 'Bypassed validation for user',
          context: 'jira/issue-validation',
        });

        expect(mockSetFailed).not.toHaveBeenCalled();
        expect(mockCreateComment).not.toHaveBeenCalled();
      });

      /**
       * Test bypass users functionality with multiple users in comma-separated list
       */
      it('should skip Jira validation when PR author is in multiple bypass users list', async () => {
        const additionalBypassUser = faker.internet.username();
        const multipleUsers = `${testData.bypassUser},${additionalBypassUser},${testData.nonBypassUser}`;

        setupGitHubContext({ prTitleWithJira: testData.prTitleWithoutJira });
        mockGetInput.mockImplementation(createMockGetInput({ bypassUsers: multipleUsers }));

        // Set PR author to be one of the bypass users
        github.context.payload.pull_request!.user = { login: additionalBypassUser };

        await run();

        expect(mockCreateCommitStatus).toHaveBeenCalledWith({
          owner: testData.owner,
          repo: testData.repo,
          sha: testData.prSha,
          state: 'success',
          target_url: undefined,
          description: 'Bypassed validation for user',
          context: 'jira/issue-validation',
        });

        expect(mockSetFailed).not.toHaveBeenCalled();
        expect(mockCreateComment).not.toHaveBeenCalled();
      });

      /**
       * Test bypass users with whitespace handling in comma-separated list
       */
      it('should handle bypass users list with extra whitespace', async () => {
        const additionalBypassUser = faker.internet.username();
        const multipleUsersWithWhitespace = ` ${testData.bypassUser} , ${additionalBypassUser} , ${testData.nonBypassUser} `;

        setupGitHubContext({ prTitleWithJira: testData.prTitleWithoutJira });
        mockGetInput.mockImplementation(createMockGetInput({ bypassUsers: multipleUsersWithWhitespace }));

        // Set PR author to be one of the bypass users (testing whitespace trimming)
        github.context.payload.pull_request!.user = { login: testData.bypassUser };

        await run();

        expect(mockCreateCommitStatus).toHaveBeenCalledWith({
          owner: testData.owner,
          repo: testData.repo,
          sha: testData.prSha,
          state: 'success',
          target_url: undefined,
          description: 'Bypassed validation for user',
          context: 'jira/issue-validation',
        });

        expect(mockSetFailed).not.toHaveBeenCalled();
      });
    });

    describe('Bypass Labels', () => {
      /**
       * Test bypass labels functionality - should skip validation when single bypass label is present
       */
      it('should skip Jira validation when PR has the single bypass label', async () => {
        const bypassLabel = 'no-jira-required';

        setupGitHubContext({ prTitleWithJira: testData.prTitleWithoutJira });
        mockGetInput.mockImplementation(createMockGetInput({ bypassLabels: bypassLabel }));

        // Mock PR has the bypass label
        mockListLabelsOnIssue.mockResolvedValue({
          data: [{ name: bypassLabel }],
        });

        await run();

        // Should create success status despite no Jira issue in title
        expect(mockCreateCommitStatus).toHaveBeenCalledWith({
          owner: testData.owner,
          repo: testData.repo,
          sha: testData.prSha,
          state: 'success',
          target_url: undefined,
          description: 'Bypassed validation due to label',
          context: 'jira/issue-validation',
        });

        expect(mockSetFailed).not.toHaveBeenCalled();
        expect(mockCreateComment).not.toHaveBeenCalled();
      });

      /**
       * Test bypass labels functionality with multiple labels in comma-separated list
       */
      it('should skip Jira validation when PR has one of multiple bypass labels', async () => {
        const bypassLabel1 = 'no-jira-required';
        const bypassLabel2 = 'skip-validation';
        const bypassLabel3 = 'hotfix';
        const multipleLabels = `${bypassLabel1},${bypassLabel2},${bypassLabel3}`;

        setupGitHubContext({ prTitleWithJira: testData.prTitleWithoutJira });
        mockGetInput.mockImplementation(createMockGetInput({ bypassLabels: multipleLabels }));

        // Mock PR has one of the bypass labels
        mockListLabelsOnIssue.mockResolvedValue({
          data: [{ name: 'enhancement' }, { name: bypassLabel2 }, { name: 'bug' }],
        });

        await run();

        expect(mockCreateCommitStatus).toHaveBeenCalledWith({
          owner: testData.owner,
          repo: testData.repo,
          sha: testData.prSha,
          state: 'success',
          target_url: undefined,
          description: 'Bypassed validation due to label',
          context: 'jira/issue-validation',
        });

        expect(mockSetFailed).not.toHaveBeenCalled();
        expect(mockCreateComment).not.toHaveBeenCalled();
      });

      /**
       * Test bypass labels with whitespace handling in comma-separated list
       */
      it('should handle bypass labels list with extra whitespace', async () => {
        const bypassLabel = 'no-jira-required';
        const multipleLabelsWithWhitespace = ` ${bypassLabel} , skip-validation , hotfix `;

        setupGitHubContext({ prTitleWithJira: testData.prTitleWithoutJira });
        mockGetInput.mockImplementation(createMockGetInput({ bypassLabels: multipleLabelsWithWhitespace }));

        // Mock PR has the bypass label (testing whitespace trimming)
        mockListLabelsOnIssue.mockResolvedValue({
          data: [{ name: bypassLabel }],
        });

        await run();

        expect(mockCreateCommitStatus).toHaveBeenCalledWith({
          owner: testData.owner,
          repo: testData.repo,
          sha: testData.prSha,
          state: 'success',
          target_url: undefined,
          description: 'Bypassed validation due to label',
          context: 'jira/issue-validation',
        });
      });

      /**
       * Test normal validation when PR has labels but none are bypass labels
       */
      it('should perform normal validation when PR has labels but none match bypass labels', async () => {
        const bypassLabels = 'no-jira-required,skip-validation';

        setupGitHubContext({ prTitleWithJira: testData.prTitleWithoutJira });
        mockGetInput.mockImplementation(createMockGetInput({ bypassLabels }));

        // Mock PR has labels but none are bypass labels
        mockListLabelsOnIssue.mockResolvedValue({
          data: [{ name: 'enhancement' }, { name: 'bug' }, { name: 'documentation' }],
        });

        await run();

        // Should create error status because no Jira issue in title and no bypass label
        expect(mockCreateCommitStatus).toHaveBeenCalledWith({
          owner: testData.owner,
          repo: testData.repo,
          sha: testData.prSha,
          state: 'error',
          target_url: undefined,
          description: 'Jira issue required in PR title (format: MAPCO-1234)',
          context: 'jira/issue-validation',
        });
      });

      /**
       * Test normal validation when bypass labels is empty
       */
      it('should perform normal validation when bypass-labels is empty', async () => {
        setupGitHubContext({ prTitleWithJira: testData.prTitleWithoutJira });
        mockGetInput.mockImplementation(createMockGetInput({ bypassLabels: '' }));

        // Mock PR has various labels
        mockListLabelsOnIssue.mockResolvedValue({
          data: [{ name: 'enhancement' }, { name: 'no-jira-required' }],
        });

        await run();

        // Should not skip validation even though PR has a label that could be a bypass label
        expect(mockCreateCommitStatus).toHaveBeenCalledWith({
          owner: testData.owner,
          repo: testData.repo,
          sha: testData.prSha,
          state: 'error',
          target_url: undefined,
          description: 'Jira issue required in PR title (format: MAPCO-1234)',
          context: 'jira/issue-validation',
        });
      });

      /**
       * Test API error when fetching labels
       */
      it('should handle API error when fetching PR labels', async () => {
        const labelError = new Error('Failed to fetch labels');

        setupGitHubContext({ prTitleWithJira: testData.prTitleWithoutJira });
        mockGetInput.mockImplementation(createMockGetInput({ bypassLabels: 'no-jira-required' }));

        // Mock label API to throw error
        mockListLabelsOnIssue.mockRejectedValue(labelError);

        await run();

        expect(mockSetFailed).toHaveBeenCalledWith(`Action failed: ${labelError.message}`);
      });
    });

    describe('Combined Bypass Scenarios', () => {
      /**
       * Test priority of user bypass over label bypass
       */
      it('should prioritize user bypass over label bypass when both are configured', async () => {
        setupGitHubContext({ prTitleWithJira: testData.prTitleWithoutJira });
        mockGetInput.mockImplementation(
          createMockGetInput({
            bypassUsers: testData.bypassUser,
            bypassLabels: 'no-jira-required',
          })
        );

        // Set PR author to be in bypass list
        github.context.payload.pull_request!.user = { login: testData.bypassUser };

        // Mock PR also has bypass label
        mockListLabelsOnIssue.mockResolvedValue({
          data: [{ name: 'no-jira-required' }],
        });

        await run();

        expect(mockCreateCommitStatus).toHaveBeenCalledWith({
          owner: testData.owner,
          repo: testData.repo,
          sha: testData.prSha,
          state: 'success',
          target_url: undefined,
          description: 'Bypassed validation for user',
          context: 'jira/issue-validation',
        });

        // Verify labels API was not called when user bypass applies
        expect(mockListLabelsOnIssue).not.toHaveBeenCalled();
      });

      /**
       * Test fallback to label bypass when user bypass doesn't apply
       */
      it('should use label bypass when user bypass is configured but user is not in list', async () => {
        setupGitHubContext({ prTitleWithJira: testData.prTitleWithoutJira });
        mockGetInput.mockImplementation(
          createMockGetInput({
            bypassUsers: testData.bypassUser,
            bypassLabels: 'no-jira-required',
          })
        );

        // Set PR author to NOT be in bypass list
        github.context.payload.pull_request!.user = { login: testData.nonBypassUser };

        // Mock PR has bypass label
        mockListLabelsOnIssue.mockResolvedValue({
          data: [{ name: 'no-jira-required' }],
        });

        await run();

        expect(mockCreateCommitStatus).toHaveBeenCalledWith({
          owner: testData.owner,
          repo: testData.repo,
          sha: testData.prSha,
          state: 'success',
          target_url: undefined,
          description: 'Bypassed validation due to label',
          context: 'jira/issue-validation',
        });

        // Verify labels API was called when user bypass doesn't apply
        expect(mockListLabelsOnIssue).toHaveBeenCalled();
      });

      /**
       * Test normal validation when neither user nor label bypass applies
       */
      it('should perform normal validation when neither user nor label bypass applies', async () => {
        setupGitHubContext({ prTitleWithJira: testData.prTitleWithoutJira });
        mockGetInput.mockImplementation(
          createMockGetInput({
            bypassUsers: testData.bypassUser,
            bypassLabels: 'no-jira-required',
          })
        );

        // Set PR author to NOT be in bypass list
        github.context.payload.pull_request!.user = { login: testData.nonBypassUser };

        // Mock PR has labels but none are bypass labels
        mockListLabelsOnIssue.mockResolvedValue({
          data: [{ name: 'enhancement' }, { name: 'bug' }],
        });

        await run();

        expect(mockCreateCommitStatus).toHaveBeenCalledWith({
          owner: testData.owner,
          repo: testData.repo,
          sha: testData.prSha,
          state: 'error',
          target_url: undefined,
          description: 'Jira issue required in PR title (format: MAPCO-1234)',
          context: 'jira/issue-validation',
        });
      });

      /**
       * Test that bypass still works when PR has Jira issue but bypass is configured
       */
      it('should bypass validation even when Jira issue is present if user is in bypass list', async () => {
        // Use PR title WITH Jira issue
        setupGitHubContext();
        mockGetInput.mockImplementation(createMockGetInput({ bypassUsers: testData.bypassUser }));

        // Set PR author to be in bypass list
        github.context.payload.pull_request!.user = { login: testData.bypassUser };

        await run();

        // Should still show bypass message even though Jira issue exists
        expect(mockCreateCommitStatus).toHaveBeenCalledWith({
          owner: testData.owner,
          repo: testData.repo,
          sha: testData.prSha,
          state: 'success',
          target_url: undefined,
          description: 'Bypassed validation for user',
          context: 'jira/issue-validation',
        });

        // Should not create Jira comment when bypassed
        expect(mockCreateComment).not.toHaveBeenCalled();
      });
    });
  });
});
