// Generated by Copilot
import { setFailed, info as logInfo, warning as logWarning, getInput } from '@actions/core';
import { context as githubContext, getOctokit } from '@actions/github';

/**
 * Interface for Jira issue check result
 */
interface JiraCheckResult {
  hasJira: boolean;
  jiraIssue?: string;
}

/**
 * Interface for GitHub pull request payload structure
 */
interface PullRequestPayload {
  readonly title: string;
  readonly head: {
    readonly sha: string;
  };
  readonly user: {
    readonly login: string;
  } | null;
}

/**
 * Interface for GitHub context information
 */
interface GitHubContextInfo {
  readonly owner: string;
  readonly repo: string;
  readonly prNumber: number;
  readonly prTitle: string;
  readonly prSha: string;
  readonly prAuthor: string | undefined;
}

/**
 * Constants for the action
 */
const JIRA_STATUS_CONTEXT = 'jira/issue-validation' as const;
const JIRA_COMMENT_IDENTIFIER = 'ðŸŽ« Related Jira Issue' as const;
const SUCCESS_STATE = 'success' as const;
const ERROR_STATE = 'error' as const;

/**
 * Interface for action inputs
 */
interface ActionInputs {
  readonly token: string;
  readonly jiraBaseUrl: string;
  readonly jiraIssuePattern: string;
  readonly bypassLabelsInput: string;
  readonly bypassUsersInput: string;
}

/**
 * Type for bypass check result
 */
type BypassResult = { bypassed: true; reason: string } | { bypassed: false };

/**
 * Validates required action inputs
 * @param token - GitHub token
 * @param jiraBaseUrl - Jira base URL
 * @returns True if inputs are valid, false otherwise
 */
function validateInputs(token: string | undefined, jiraBaseUrl: string): boolean {
  const hasToken = token !== undefined && token !== '';
  if (!hasToken) {
    setFailed('GitHub token is required');
    return false;
  }

  const hasJiraBaseUrl = jiraBaseUrl !== '';
  if (!hasJiraBaseUrl) {
    setFailed('Jira base URL is required');
    return false;
  }

  return true;
}

/**
 * Extracts GitHub context information from the pull request event
 * @param context - GitHub context
 * @returns GitHubContextInfo or undefined if invalid
 */
function extractContextInfo(context: typeof githubContext): GitHubContextInfo | undefined {
  const isPullRequestEvent = context.eventName === 'pull_request';
  if (!isPullRequestEvent) {
    logWarning('This action is designed to work with pull request events');
    return undefined;
  }

  const hasPullRequestPayload = context.payload.pull_request !== undefined;
  if (!hasPullRequestPayload) {
    setFailed('Pull request payload not found in context');
    return undefined;
  }

  const { owner, repo } = context.repo;
  const prNumber = context.issue.number;
  const pullRequest = context.payload.pull_request as unknown as PullRequestPayload;
  const prTitle = pullRequest.title;
  const prSha = pullRequest.head.sha;
  const prAuthor = pullRequest.user?.login;

  return {
    owner,
    repo,
    prNumber,
    prTitle,
    prSha,
    prAuthor,
  };
}

/**
 * Checks if the pull request author is in the bypass list
 * @param prAuthor - The author of the pull request
 * @param bypassUsersInput - Comma-separated string of usernames to bypass
 * @returns True if the author is in the bypass list, false otherwise
 */
function isUserBypassed(prAuthor: string, bypassUsersInput: string): boolean {
  if (!bypassUsersInput.trim()) {
    return false;
  }

  const bypassUsers = bypassUsersInput.split(',').map((user) => user.trim());
  return bypassUsers.includes(prAuthor);
}

/**
 * Extracts Jira issue ID from PR title using regex pattern
 * @param title - The pull request title
 * @param pattern - The regex pattern to match Jira issues
 * @returns JiraCheckResult containing whether Jira issue was found and the issue ID
 */
function extractJiraIssue(title: string, pattern: string): JiraCheckResult {
  const regex = new RegExp(pattern);
  const match = title.match(regex);

  const hasMatchWithValue = match?.[0] !== undefined;
  if (hasMatchWithValue) {
    return {
      hasJira: true,
      jiraIssue: match[0],
    };
  }

  return { hasJira: false };
}

/**
 * Creates or updates commit status for Jira validation
 * @param octokit - GitHub API client
 * @param contextInfo - GitHub context information
 * @param jiraResult - Result of Jira issue check
 * @param jiraBaseUrl - Base URL for Jira instance
 */
async function setCommitStatus(
  octokit: ReturnType<typeof getOctokit>,
  contextInfo: GitHubContextInfo,
  jiraResult: JiraCheckResult,
  jiraBaseUrl: string
): Promise<void> {
  const { owner, repo, prSha } = contextInfo;
  const { hasJira, jiraIssue } = jiraResult;

  const statusState = hasJira ? SUCCESS_STATE : ERROR_STATE;
  const statusDescription = hasJira ? 'Jira issue found in PR title' : 'Jira issue required in PR title (format: MAPCO-1234)';
  const targetUrl = hasJira && jiraIssue !== undefined ? `${jiraBaseUrl}/browse/${jiraIssue}` : undefined;

  await octokit.rest.repos.createCommitStatus({
    owner,
    repo,
    sha: prSha,
    state: statusState,

    target_url: targetUrl,
    description: statusDescription,
    context: JIRA_STATUS_CONTEXT,
  });
}

/**
 * Finds existing bot comment with Jira link
 * @param octokit - GitHub API client
 * @param contextInfo - GitHub context information
 * @returns Comment ID if found, undefined otherwise
 */
async function findExistingJiraComment(octokit: ReturnType<typeof getOctokit>, contextInfo: GitHubContextInfo): Promise<number | undefined> {
  const { owner, repo, prNumber } = contextInfo;

  const comments = await octokit.rest.issues.listComments({
    owner,
    repo,

    issue_number: prNumber,
  });

  const existingComment = comments.data.find((comment) => {
    const isBotUser = comment.user?.type === 'Bot';
    const hasJiraIdentifier = comment.body?.includes(JIRA_COMMENT_IDENTIFIER) === true;
    return isBotUser && hasJiraIdentifier;
  });

  return existingComment?.id;
}

/**
 * Creates or updates Jira link comment on pull request
 * @param octokit - GitHub API client
 * @param contextInfo - GitHub context information
 * @param jiraIssue - The Jira issue ID
 * @param jiraBaseUrl - Base URL for Jira instance
 */
async function createOrUpdateJiraComment(
  octokit: ReturnType<typeof getOctokit>,
  contextInfo: GitHubContextInfo,
  jiraIssue: string,
  jiraBaseUrl: string
): Promise<void> {
  const { owner, repo, prNumber } = contextInfo;
  const jiraUrl = `${jiraBaseUrl}/browse/${jiraIssue}`;
  const commentBody = `ðŸŽ« **Related Jira Issue**: [${jiraIssue}](${jiraUrl})`;

  const existingCommentId = await findExistingJiraComment(octokit, contextInfo);

  if (existingCommentId !== undefined) {
    // Update existing comment
    await octokit.rest.issues.updateComment({
      owner,
      repo,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      comment_id: existingCommentId,
      body: commentBody,
    });
    logInfo(`Updated existing Jira comment for issue: ${jiraIssue}`);
  } else {
    // Create new comment
    await octokit.rest.issues.createComment({
      owner,
      repo,

      issue_number: prNumber,
      body: commentBody,
    });
    logInfo(`Created new Jira comment for issue: ${jiraIssue}`);
  }
}

/**
 * Parses comma-separated bypass labels from input
 * @param bypassLabelsInput - Comma-separated string of bypass labels
 * @returns Array of trimmed bypass labels
 */
function parseBypassLabels(bypassLabelsInput: string): readonly string[] {
  if (bypassLabelsInput === '') {
    return [];
  }

  return bypassLabelsInput
    .split(',')
    .map((label) => label.trim())
    .filter((label) => label !== '');
}

/**
 * Checks if PR has any bypass labels that would skip Jira validation
 * @param octokit - GitHub API client
 * @param contextInfo - GitHub context information
 * @param bypassLabels - Array of bypass label names
 * @returns True if PR has any bypass labels
 */
async function hasBypassLabels(
  octokit: ReturnType<typeof getOctokit>,
  contextInfo: GitHubContextInfo,
  bypassLabels: readonly string[]
): Promise<boolean> {
  // Early return if no bypass labels configured
  if (bypassLabels.length === 0) {
    return false;
  }

  const { owner, repo, prNumber } = contextInfo;

  // Fetch PR labels from GitHub API
  const response = await octokit.rest.issues.listLabelsOnIssue({
    owner,
    repo,
    issue_number: prNumber,
  });

  const prLabels = response.data.map((label) => label.name);

  // Check if any PR label matches bypass labels
  const hasBypassLabel = bypassLabels.some((bypassLabel) => prLabels.includes(bypassLabel));

  return hasBypassLabel;
}

/**
 * Checks if Jira validation should be bypassed for this PR
 * @param octokit - GitHub API client
 * @param contextInfo - GitHub context information
 * @param bypassUsersInput - Comma-separated string of usernames to bypass
 * @param bypassLabelsInput - Comma-separated string of labels to bypass
 * @returns BypassResult indicating if validation should be bypassed and why
 */
async function checkBypass(
  octokit: ReturnType<typeof getOctokit>,
  contextInfo: GitHubContextInfo,
  bypassUsersInput: string,
  bypassLabelsInput: string
): Promise<BypassResult> {
  const { prAuthor } = contextInfo;

  // Check if PR author is in bypass list
  const isPrAuthorBypassed = prAuthor !== undefined && isUserBypassed(prAuthor, bypassUsersInput);
  if (isPrAuthorBypassed) {
    return { bypassed: true, reason: `PR author ${prAuthor} is in bypass list` };
  }

  // Check if PR has bypass labels
  const bypassLabels = parseBypassLabels(bypassLabelsInput);
  const prHasBypassLabels = await hasBypassLabels(octokit, contextInfo, bypassLabels);
  if (prHasBypassLabels) {
    return { bypassed: true, reason: 'PR has bypass labels' };
  }

  return { bypassed: false };
}

/**
 * Sets commit status to success (bypassed validation)
 * @param octokit - GitHub API client
 * @param contextInfo - GitHub context information
 * @param jiraBaseUrl - Base URL for Jira instance
 */
async function setBypassedStatus(octokit: ReturnType<typeof getOctokit>, contextInfo: GitHubContextInfo, jiraBaseUrl: string): Promise<void> {
  await setCommitStatus(octokit, contextInfo, { hasJira: true, jiraIssue: undefined }, jiraBaseUrl);
}

/**
 * Processes Jira validation and updates PR accordingly
 * @param octokit - GitHub API client
 * @param contextInfo - GitHub context information
 * @param jiraIssuePattern - Regex pattern for Jira issues
 * @param jiraBaseUrl - Base URL for Jira instance
 */
async function processJiraValidation(
  octokit: ReturnType<typeof getOctokit>,
  contextInfo: GitHubContextInfo,
  jiraIssuePattern: string,
  jiraBaseUrl: string
): Promise<void> {
  // Extract Jira issue from PR title
  const jiraResult = extractJiraIssue(contextInfo.prTitle, jiraIssuePattern);

  const hasJiraIssue = jiraResult.hasJira && jiraResult.jiraIssue !== undefined;
  if (hasJiraIssue) {
    logInfo(`Found Jira issue: ${jiraResult.jiraIssue as string}`);
  } else {
    logWarning('No Jira issue found in PR title');
  }

  // Set commit status based on Jira validation
  await setCommitStatus(octokit, contextInfo, jiraResult, jiraBaseUrl);
  logInfo(`Set commit status: ${jiraResult.hasJira ? 'success' : 'error'}`);

  // Add or update Jira link comment if issue found
  if (hasJiraIssue && jiraResult.jiraIssue !== undefined) {
    await createOrUpdateJiraComment(octokit, contextInfo, jiraResult.jiraIssue, jiraBaseUrl);
  }
}

/**
 * Gets action inputs from environment or GitHub action inputs
 * @returns Action inputs object
 */
function getActionInputs(): ActionInputs {
  const githubTokenInput = getInput('github-token');
  const envToken = process.env.GITHUB_TOKEN;
  const patternInput = getInput('jira-issue-pattern');

  // Handle nullable inputs explicitly
  const token = githubTokenInput !== '' ? githubTokenInput : (envToken ?? '');
  const jiraIssuePattern = patternInput !== '' ? patternInput : 'MAPCO-\\d+';

  return {
    token,
    jiraBaseUrl: getInput('jira-base-url'),
    jiraIssuePattern,
    bypassLabelsInput: getInput('bypass-labels'),
    bypassUsersInput: getInput('bypass-users'),
  };
}

/**
 * Handles the main workflow for the action
 * @param octokit - GitHub API client
 * @param contextInfo - GitHub context information
 * @param inputs - Action inputs
 */
async function handleWorkflow(octokit: ReturnType<typeof getOctokit>, contextInfo: GitHubContextInfo, inputs: ActionInputs): Promise<void> {
  logInfo(`Processing PR #${contextInfo.prNumber}: "${contextInfo.prTitle}"`);

  // Check if validation should be bypassed
  const bypassResult = await checkBypass(octokit, contextInfo, inputs.bypassUsersInput, inputs.bypassLabelsInput);

  if (bypassResult.bypassed) {
    logInfo(`Bypassing Jira validation: ${bypassResult.reason}`);
    await setBypassedStatus(octokit, contextInfo, inputs.jiraBaseUrl);
    return;
  }

  // Proceed with normal Jira validation
  await processJiraValidation(octokit, contextInfo, inputs.jiraIssuePattern, inputs.jiraBaseUrl);
  logInfo('Jira integration completed successfully');
}

/**
 * Main function that executes the GitHub action
 * @returns Promise<void>
 */
export async function run(): Promise<void> {
  try {
    // Get action inputs
    const inputs = getActionInputs();

    // Validate required inputs
    const isValidInput = validateInputs(inputs.token, inputs.jiraBaseUrl);
    if (!isValidInput) {
      return;
    }

    // Extract context information
    const contextInfo = extractContextInfo(githubContext);
    if (contextInfo === undefined) {
      return;
    }

    // Initialize GitHub client
    const octokit = getOctokit(inputs.token);

    // Handle the main workflow
    await handleWorkflow(octokit, contextInfo, inputs);
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    setFailed(`Action failed: ${errorMessage}`);
  }
}
